
buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    classpath "io.github.fourlastor:construo:1.7.1"
    if(enableGraalNative == 'true') {
      classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
    }
  }
}
plugins {
  id "application"
}
apply plugin: 'io.github.fourlastor.construo'


import io.github.fourlastor.construo.Target

// 注释显式设置资源目录，禁用将资源打包进主jar
//sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'cn.tldream.ff.lwjgl3.Lwjgl3Launcher'
application.setMainClass(mainClassName)
eclipse.project.name = appName + '-lwjgl3'
java.sourceCompatibility = 17
java.targetCompatibility = 17
if (JavaVersion.current().isJava9Compatible()) {
        compileJava.options.release.set(17)
}

dependencies {
  implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-bullet-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation project(':core')
  implementation("com.badlogicgames.gdx:gdx-tools:$gdxVersion"){exclude group: 'com.badlogicgames.gdx', module: 'gdx-backend-lwjgl'}

  if(enableGraalNative == 'true') {
    implementation "io.github.berstanio:gdx-svmhelper-backend-lwjgl3:$graalHelperVersion"
      implementation "io.github.berstanio:gdx-svmhelper-extension-box2d:$graalHelperVersion"
      implementation "io.github.berstanio:gdx-svmhelper-extension-bullet:$graalHelperVersion"
      implementation "io.github.berstanio:gdx-svmhelper-extension-freetype:$graalHelperVersion"
    }

}

def os = System.properties['os.name'].toLowerCase()

run {
  workingDir = rootProject.file('assets').path
// You can uncomment the next line if your IDE claims a build failure even when the app closed properly.
  //setIgnoreExitValue(true)

  if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"
}

construo {
    // 可执行文件的名称
    name.set(appName)
    // 人类可读的名称，例如在macOS的.app名称中使用
    humanName.set(appName)
    // 可选，默认为项目版本属性
    version.set("$projectVersion")

    targets.configure {
      create("linuxX64", Target.Linux) {
        architecture.set(Target.Architecture.X86_64)
        jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_linux_hotspot_17.0.12_7.tar.gz")
      }
      create("macM1", Target.MacOs) {
        architecture.set(Target.Architecture.AARCH64)
        jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.12_7.tar.gz")
        // macOS needs an identifier
        identifier.set("cn.tldream.ff." + appName)
        // Optional: icon for macOS
        macIcon.set(project.file("icons/logo.icns"))
      }
      create("macX64", Target.MacOs) {
        architecture.set(Target.Architecture.X86_64)
        jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_mac_hotspot_17.0.12_7.tar.gz")
        // macOS needs an identifier
        identifier.set("cn.tldream.ff." + appName)
        // Optional: icon for macOS
        macIcon.set(project.file("icons/logo.icns"))
      }
      create("winX64", Target.Windows) {
        architecture.set(Target.Architecture.X86_64)
        jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_windows_hotspot_17.0.12_7.zip")
        // 在游戏运行时显示控制台，打印消息。
        useConsole.set(true)
      }
    }
}

// 相当于jar任务；这里是为了与gdx设置兼容。
tasks.register('dist') {
  dependsOn 'jar'
}

// jar 打包
jar {
  // 设置JAR包命名格式为应用名-版本号.jar
  archiveFileName.set("${appName}-${projectVersion}.jar")

  // 注释依赖打包，禁用将依赖打包进主jar
  /*// 依赖处理
  // 排除重复文件避免构建错误
  // 将runtimeClasspath的所有依赖（包括第三方库）解压后合并到最终JAR中
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  // 文件过滤
  // 移除签名文件（.SF/.DSA/.RSA）避免安全校验冲突
  // 排除Maven元数据文件减少包体积
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
  }*/

  // 可执行配置
  // 设置Main-Class使JAR可执行
  manifest {
    attributes (
      'Main-Class': project.mainClassName,
//      'Class-Path': configurations.runtimeClasspath.files.collect { "lib/" + it.name }.join(' ')
      'Class-Path': configurations.runtimeClasspath.files.collect { "lib/${it.name}"  }.join(' ')
    )
  }
  // 赋予JAR文件Unix系统的可执行权限
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

// 定义发布包结构
distributions {
  main {
    contents {
      // 根目录
      into(''){
        from(jar)
        from startScripts
      }
      // 资源
      into('assets') {
        from rootProject.file('assets').path
      }
    }
  }
}

//startScripts.dependsOn(':lwjgl3:jar')
//startScripts.classpath = project.tasks.jar.outputs.files

if(enableGraalNative == 'true') {
  apply from: file("nativeimage.gradle")
}
